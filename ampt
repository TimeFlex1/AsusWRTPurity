
#!/bin/sh
#bof

# Troubleshoot options
#set -x
#set -v

# Set environment PATH to system binaries
export PATH=/sbin:/bin:/usr/sbin:/usr/bin$PATH

# Author: ravenise
# https://www.snbforums.com/members/jarmka.58701/
# https://github.com/rugabunda

# How to install on Asuswrt-Merlin
# Enter this into your favorite SSH terminal, without the leading "#":
# /usr/sbin/curl -Os https://raw.githubusercontent.com/decoderman/amtm/master/amtm && sh amtm

# Version, release date
version=0.01
release="May 15 2018"
title="AsusWRTPurity"
thisScript=ampt

# Functions follow
about_ampt(){
	echo
	print_dash_line
	printf "\\n $thisScript, the $title\\n"
	printf " Version $version, released on $release\\n"
	printf "\\n ampt speeds up browsing upto x10, removes PUP's, potentially unwated probes\\n for wireless routers running Asuswrt-Merlin firmware.\\n"
	printf "\\n For updates and discussion visit this thread:\\n"
	printf " https://www.snbforums.com/threads/script-speed-up-browsing-upto-10x-stop-asuswrt-from-calling-home-to-google-trendmicro-more.46449/\\n"
	printf "\\n Project is hosted on GitHub:\\n"
	printf " https://github.com/rugabunda/AsusWRTPurity/\\n"
	printf " Author: ravenise\\n"
	printf " https://www.snbforums.com/members/jarmka.58701/\\n"
	printf " https://github.com/rugabunda\\n"
	printf "\\n Contributors: SNBforum Community\\n"
	printf "\\n Legal Boilerplate:\\n"
	printf " $thisScript is free to use with no exceptions\\n"
	print_dash_line
	press_enter_to "return to menu"
	show_ampt menu
}

print_dash_line(){ echo "---------------------------------------";}
print_info_line(){ printf "\\n---------------| INFO |----------------\\n\\n";}
print_end_line(){ printf "${RED_LINE}_______________________________________$NC\\n\\n";}
press_enter_to(){ printf "\\n Press [Enter] to $1 ";read -r;echo;}
continue_dialog(){
	echo
	print_dash_line
	while true;do
		printf "\\n Continue? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		echo;break;;
			[Ee])	show_ampt menu;break;;
			*)		printf "\\n input is not an option\\n";;
		esac
	done
}

install_ampt(){
	mkdir -p "/jffs/scripts"

	if [ "$(nvram get jffs2_scripts)" != "1" ]; then
		nvram set jffs2_scripts=1
		nvram commit
		forcereboot=1
	fi

	# install to /jffs/scripts/$thisScript
	[ ! -f "/jffs/scripts/$thisScript" ] && cp "$0" /jffs/scripts/$thisScript
	chmod 0755 /jffs/scripts/$thisScript
	message="/jffs/scripts/$thisScript"

	# add link to /opt/bin whenever found, will be re-checked at every start further down
	if [ -d "/opt/bin" ] && [ ! -f "/opt/bin/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		message="/jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
	fi

	# reboot if custom scripts were not enabled before
	if [ "$forcereboot" = "1" ]; then
		clear
		print_info_line
		echo " $title"
		echo " successfully installed!"
		echo
		echo " You can start it with:"
		printf " $message\\n"
		echo " But first, a reboot of your router is"
		echo " required to finish the install."
		press_enter_to "confirm"
		[ "$0" != "/jffs/scripts/$thisScript" ] && rm -f "$0"
		reboot
		exit 0
	else
		if [ "$0" = "/jffs/scripts/$thisScript" ]; then
			subshell=
		else
			subshell="exec"
			rm -f "$0"
		fi
		"$subshell" /jffs/scripts/$thisScript " $title\\n successfully installed!\\n\\n You can now start it with:\\n $message"
	fi
}

remove_ampt(){
	print_info_line
	echo " Do you want to remove $thisScript now?"
	continue_dialog
	rm -f /opt/bin/$thisScript
	rm -f /jffs/scripts/$thisScript
	rm -f "$0"
	echo " Removed all traces of $thisScript"
	echo
	exit 0
}

update_ampt(){
	remoteurl="https://raw.githubusercontent.com/rugabunda/AsusWRTPurity/master/ampt"
	curl -fsN --retry 3 "$remoteurl" | grep -qF "version=" || show_ampt " Update aborted,\\n could not retrieve version"
	remotever="$(curl -fsN --retry 3 "$remoteurl" | grep "^version=" | sed -e 's/version=//')"

	if [ "$version" = "$remotever" ]; then
		print_info_line
		echo " No new version is available,"
		echo " do you want to update anyway?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n force updated to v$remotever"
	fi

	if [ "$version" != "$remotever" ]; then
		print_info_line
		echo " An update is available:"
		echo " From v$version to v$remotever"
		echo
		echo " Do you want to update now?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n updated from v$version to v$remotever"
	fi
}

# recheck when /opt/bin has become available
recheck_opt(){
	if [ -d "/opt/bin" ] && [ ! -f "/opt/bin/$thisScript" ] && [ -f "/jffs/scripts/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		show_amtp " /opt/bin detected!\\n\\n You can now start $thisScript with:\\n /jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
	fi
}













# 1) *Speed up browsing upto 10x, Stop AsusWRT Probes
     Block PTR on Localhost, allow PTR for Clients (192.168.*)*
Notify users: 
Created/Added to bottom of /jffs/scripts/dnsmasq.postconf 
and /etc/dnsmasq.conf (to avoid rebooting)
(press any key to continue)

CONFIG=$1
source /usr/sbin/helper.sh
sed -i '$a\ ' $CONFIG
sed -i '$a\###############################################' $CONFIG
sed -i '$a\#Block PTR on localhost, allow PTR for clients#' $CONFIG
sed -i '$a\###############################################' $CONFIG
sed -i '$a\ ' $CONFIG
sed -i '$a\####################################' $CONFIG
sed -i '$a\#May Speed up Browsing Considerably#' $CONFIG
sed -i '$a\####################################' $CONFIG
sed -i '$a\ ' $CONFIG
pc_append "server=/168.192.in-addr.arpa/#" $CONFIG
pc_append "server=/in-addr.arpa/" $CONFIG

(service restart_dnsmasq)

# 2) *Speed up browsing upto 10x, Stop AsusWRT Probes: 
     Block PTR on Localhost + Clients (192.168.*) For enhanced security.*

Notify users: Created/Added to bottom of /jffs/scripts/dnsmasq.postconf
and /etc/dnsmasq.conf (to avoid rebooting)
(press any key to continue)

CONFIG=$1
source /usr/sbin/helper.sh
sed -i '$a\ ' $CONFIG
sed -i '$a\###############################################' $CONFIG
sed -i '$a\#Block PTR on localhost, block PTR for clients#' $CONFIG
sed -i '$a\###############################################' $CONFIG
sed -i '$a\ ' $CONFIG
sed -i '$a\####################################' $CONFIG
sed -i '$a\#May Speed up Browsing Considerably#' $CONFIG
sed -i '$a\####################################' $CONFIG
sed -i '$a\ ' $CONFIG
pc_append "server=/168.192.in-addr.arpa/" $CONFIG
pc_append "server=/in-addr.arpa/" $CONFIG

service restart_dnsmasq

#2a) Block Arpa entirely (experimental)
Notify users: Created/Added to bottom of 
/jffs/scripts/dnsmasq.postconf
and /etc/dnsmasq.conf (to avoid rebooting)

pc_append "server=/arpa/" $CONFIG
service restart_dnsmasq

# 3) Block AsusWRT built in signaling to Trendmicro, Google & other entities
Notify users: 
Create/Add to bottom of /jffs/scripts/hosts.postconf
(and /etc/hosts below)

#!/bin/sh

############################################################################################
### Block Trendmicro / Asus / Google Probes & redundant NXDOMAIN dnsmasq querys and logs ###
############################################################################################

# Blocks most 10-14 second reoccurring querys to google
# Blocks all reoccurring querys to Asus / Trend Micro
# Stops redundant logging for cleaner logs [when blocking trendmicro, and google in ab-solution for example]

##############################################################################
# 1. Note, repeated querys to google safe browsing servers become apparent if:
# (A) The items listed below have been blocked by dnscrypt or dnsmasq
# (B) You've compiled and blocked whatever unique suspicious entries appear for you in dnscrypt.
# (C) You disable in-addr.arpa (PTR/Reverse DNS altogether for localhost) (recommended)
# This will break DNS name resolutions in AsusWRT apps like itfop; And possibly some websites
# Alternatively you may selectively block IP's collected from dnscrypt suspicious.log via dnsmasq hosts
# Rebooting the router with suspicious entry logs enabled will give you the list.
#
# 2. Note, repeated 10 second AsusWRT probes to google.com become apparent only when blocking AsusWRT querys
# to google safe browsing; the only solution for this without breaking google.com is a custom host entry in
# dnsmasq as provided here. I recommend pinging google.com and replacing the IP below with whatever IP appears.
#
# Exact order of persistent reoccurring query's found in dnscrypt blocked.log after compiling hundreds of
# entries from suspicious.log and importing them to blacklist.txt
#
# 144.159.185.198.in-addr.arpa AT&T Services, Inc https://otx.alienvault.com/indicator/ip/144.159.185.198
# AlienVault details [NIDS 2001569 Behavioral Unusual Port 445 traffic Potential Scan or Infection Category: Recon. Subcategory: Scanner]
# 145.159.185.198.in-addr.arpa RIPE Network Coordination Centre
# 145.23.49.198.in-addr.arpa   RIPE Network Coordination Centre
# 217.197.79.204.in-addr.arpa  RIPE Network Coordination Centre
# 91.149.5.103.in-addr.arpa    RIPE Network Coordination Centre
# 134.84.85.88.in-addr.arpa    University of Minnesota, Office of Information Technology
# 144.23.49.198.in-addr.arpa   Latin American and Caribbean IP address Regional Registry
# 133.36.101.151.in-addr.arpa  JAPAN-INET Asia Pacific Network Information Centre
# 84.36.101.151.in-addr.arpa   RIPE Network Coordination Centre
# 42.40.189.107.in-addr.arpa   JAPAN-INET Asia Pacific Network Information Centre
# rgom10-en.url.trendmicro.com
##############################################################################

#Ensure AB-Solution is Installed:
#Code /usr/sbin/curl -Os https://raw.githubusercontent.com/decoderman/amtm/master/amtm && sh amtm
#Make sure to ping google.com and replace 74.125.205.147 with local version
#Enable or disable sig updates as desired.

not sure how to do this, but 
ping google.com >> ping.txt and copy the text or something like that would be great to automate this process.

also add to /etc/hosts (to avoid rebooting)

CONFIG=$1
source /usr/sbin/helper.sh
sed -i '$a\#' $CONFIG
sed -i '$a\## begin of silently block all redundant querys to Google, TrendMicro, and Asus ##' $CONFIG
pc_append "74.125.205.147 google.com" $CONFIG
pc_append "192.168.50.2 rgom10-en.url.trendmicro.com" $CONFIG
pc_append "192.168.50.2 fbsv1.trendmicro.com" $CONFIG
pc_append "192.168.50.2 fbsv2.trendmicro.com" $CONFIG
pc_append "192.168.50.2 gslb1.fbs.trendmicro.com.akadns.net" $CONFIG
pc_append "192.168.50.2 rgom10-en.url.trendmicro.com" $CONFIG
pc_append "192.168.50.2 trendmicro.com.edgesuite.net" $CONFIG
pc_append "192.168.50.2 slb1.fbs.trendmicro.com.akadns.net" $CONFIG
pc_append "192.168.50.2 activeupdate.trendmicro.co.jp" $CONFIG
pc_append "192.168.50.2 backup21.url.trendmicro.com" $CONFIG
pc_append "192.168.50.2 wrs.trendmicro.com" $CONFIG
pc_append "192.168.50.2 e5110.dscd.akamaiedge.net" $CONFIG
pc_append "#AsusWRT AI Protection Signature updates" $CONFIG
pc_append "#192.168.50.2 dlcdnets.asus.com" $CONFIG
pc_append "#192.168.50.2 dlcdnets-ds.asus.com.edgekey.net" $CONFIG
pc_append "#Signature updates In Asia?" $CONFIG
pc_append "#192.168.50.2 wideip-dlcdnets.isoi.asia" $CONFIG
pc_append "#This showed up only once during initial sig update check, not subsequent checks. Will confirm if this is needed during next sig release." $CONFIG
pc_append "192.168.50.2 ntd-asus-2014b-en.fbs20.trendmicro.com" $CONFIG
sed -i '$a\## end of Silently Block All Redundant Querys to Google, TrendMicro, and Asus ##' $CONFIG
sed -i '$a\#' $CONFIG

service restart_dnsmasq

# 4) Block AsusWRT 10 second reoccuring portless probe to 8.8.8.8 (google dns)
(waiting for code, want to block this without needing skynet)

# 5) Block Reoccuring DNS Probe to Microsoft

nvram set dns_probe_content=127.0.0.1
nvram commit
notify: make sure to reboot router

# 6) Block IPv6 DNS over IPv4 (requires Dnscrypt)
/jffs/dnscrypt/dnscrypt-proxy.toml
search for & Replace string
sed -i -e 's/block_ipv6 = false/block_ipv6 = true/g' /jffs/dnscrypt/example-dnscrypt-proxy.toml

restart dnscrypt
(for dnscrypt installer)
/jffs/dnscrypt/manager dnscrypt-stop
/jffs/dnscrypt/manager dnscrypt-start

# 7) Block Reverse IPv6 Arpa (leaks past IPv6 DNS block)
pc_append "server=/ip6.arpa/" $CONFIG
/jffs/scripts/dnsmasq.postconf
/etc/dnsmasq.conf
service restart_dnsmasq

# 8) Enable Dnscrypt Logs 
sed -i -e 's/# log_level/log_level/g' /jffs/dnscrypt/example-dnscrypt-proxy.toml
sed -i -e 's/# file = 'query.log'/file = 'query.log'/g' /jffs/dnscrypt/example-dnscrypt-proxy.toml
sed -i -e 's/# file = 'nx.log'/file = 'suspicious.log'/g' /jffs/dnscrypt/example-dnscrypt-proxy.toml
sed -i -e 's/# log_file = 'dnscrypt-proxy.log'/log_file = 'dnscrypt-proxy.log'/g' /jffs/dnscrypt/example-dnscrypt-proxy.toml

restart dnscrypt
(for dnscrypt installer)
/jffs/dnscrypt/manager dnscrypt-stop
/jffs/dnscrypt/manager dnscrypt-start

# 9) Remove all changes

# e) Exit

















	# ampt menu
	printf "\\n$GREEN_BG u $NC update\\n"
	[ -f "/jffs/scripts/$thisScript" ] || [ -f "/opt/bin/$thisScript" ] && printf "$GREEN_BG r $NC remove\\n"  || printf "$GREEN_BG i $NC install\\n"
	printf "$GREEN_BG a $NC about\\n"
	printf "$GREEN_BG e $NC exit\\n"

	# Output under ampt menu, the notification area. $1 can be passed on as positional parameter
	if [ "$1" = "menu" ]; then
		print_end_line
	else
		print_info_line
		printf "$1\\n"
		print_end_line
	fi

	# case switcher
	while true; do

		# Input prompt
		printf "${RED_BG} What do you want to do? ${NC} ";read -r selection

		case "$selection" in

			# Scripts go here
			1)			case_1;break;;
			2)			case_2;break;;
			3)			case_3;break;;
			4)			case_4;break;;
			5)			case_5;break;;


			# ampt options
			[Uu])		update_ampt;break;;
			[Ii])		install_ampt;break;;
			[Rr])		remove_ampt;break;;
			[Aa])		about_ampt;break;;
			[Ee])		printf "\\n See you later man!\\n\\n"
						exit 0;break;;
			11)			exec "$0";break;; # hidden dev option
			1s)			$abs;show_ampt menu;break;; # hidden dev option
			*)			printf "\\n input is not an option\\n\\n";;

		esac

	done
}

# asks to install, show menu, pass along positional parameter
if [ ! -f "/jffs/scripts/$thisScript" ]; then
	echo
	print_info_line
	echo " Do you want to install $thisScript, the"
	echo " $title?"
	continue_dialog
	install_ampt
elif [ -z "$1" ]; then
	recheck_opt
	show_ampt menu
else
	show_amtm "$1"
fi
#eof
	fi

	# case switcher
	while true; do

		# Input prompt
		printf "${RED_BG} What do you want to do? ${NC} ";read -r selection

		case "$selection" in

			# Scripts go here
			1)			case_1;break;;
			2)			case_2;break;;
			3)			case_3;break;;
			4)			case_4;break;;
			5)			case_5;break;;

			# ampt options
			[Uu])		update_ampt;break;;
			[Ii])		install_ampt;break;;
			[Rr])		remove_ampt;break;;
			[Aa])		about_ampt;break;;
			[Ee])		printf "\\n See you later man!\\n\\n"
						exit 0;break;;
			11)			exec "$0";break;; # hidden dev option
			1s)			$abs;show_ampt menu;break;; # hidden dev option
			*)			printf "\\n input is not an option\\n\\n";;

		esac

	done
}

# asks to install, show menu, pass along positional parameter
if [ ! -f "/jffs/scripts/$thisScript" ]; then
	echo
	print_info_line
	echo " Do you want to install $thisScript, the"
	echo " $title?"
	continue_dialog
	install_ampt
elif [ -z "$1" ]; then
	recheck_opt
	show_ampt menu
else
	show_amtm "$1"
fi
#eof
