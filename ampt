
#!/bin/sh
#bof

# Troubleshoot options
#set -x
#set -v

# Set environment PATH to system binaries
export PATH=/sbin:/bin:/usr/sbin:/usr/bin$PATH

# Author: thelonelycoder / decoderman
# https://www.snbforums.com/members/jarmka.58701/
# https://github.com/rugabunda

# How to install on Asuswrt-Merlin
# Enter this into your favorite SSH terminal, without the leading "#":
# /usr/sbin/curl -Os https://raw.githubusercontent.com/decoderman/amtm/master/amtm && sh amtm

# Version, release date
version=0.01
release="May 15 2018"
title="Asuswrt-Merlin Purity"
thisScript=ampt

# Functions follow
about_amtm(){
	echo
	print_dash_line
	printf "\\n $thisScript, the $title\\n"
	printf " Version $version, released on $release\\n"
	printf "\\n ampt speeds up browsing upto x10, removes PUP's, potentially unwated probes\\n for wireless routers running Asuswrt-Merlin firmware.\\n"
	printf "\\n For updates and discussion visit this thread:\\n"
	printf " https://www.snbforums.com/threads/script-speed-up-browsing-upto-10x-stop-asuswrt-from-calling-home-to-google-trendmicro-more.46449/\\n"
	printf "\\n Project is hosted on GitHub:\\n"
	printf " https://github.com/rugabunda/AsusWRTPurity/\\n"
	printf " Author: ravenise\\n"
	printf " https://www.snbforums.com/members/jarmka.58701/\\n"
	printf " https://github.com/rugabunda\\n"
	printf "\\n Contributors: SNBforum Community\\n"
	printf "\\n Legal Boilerplate:\\n"
	printf " $thisScript is free to use with no exceptions\\n"
	print_dash_line
	press_enter_to "return to menu"
	show_amtm menu
}

print_dash_line(){ echo "---------------------------------------";}
print_info_line(){ printf "\\n---------------| INFO |----------------\\n\\n";}
print_end_line(){ printf "${RED_LINE}_______________________________________$NC\\n\\n";}
press_enter_to(){ printf "\\n Press [Enter] to $1 ";read -r;echo;}
continue_dialog(){
	echo
	print_dash_line
	while true;do
		printf "\\n Continue? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		echo;break;;
			[Ee])	show_amtm menu;break;;
			*)		printf "\\n input is not an option\\n";;
		esac
	done
}

install_ampt(){
	mkdir -p "/jffs/scripts"

	if [ "$(nvram get jffs2_scripts)" != "1" ]; then
		nvram set jffs2_scripts=1
		nvram commit
		forcereboot=1
	fi

	# install to /jffs/scripts/$thisScript
	[ ! -f "/jffs/scripts/$thisScript" ] && cp "$0" /jffs/scripts/$thisScript
	chmod 0755 /jffs/scripts/$thisScript
	message="/jffs/scripts/$thisScript"

	# add link to /opt/bin whenever found, will be re-checked at every start further down
	if [ -d "/opt/bin" ] && [ ! -f "/opt/bin/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		message="/jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
	fi

	# reboot if custom scripts were not enabled before
	if [ "$forcereboot" = "1" ]; then
		clear
		print_info_line
		echo " $title"
		echo " successfully installed!"
		echo
		echo " You can start it with:"
		printf " $message\\n"
		echo " But first, a reboot of your router is"
		echo " required to finish the install."
		press_enter_to "confirm"
		[ "$0" != "/jffs/scripts/$thisScript" ] && rm -f "$0"
		reboot
		exit 0
	else
		if [ "$0" = "/jffs/scripts/$thisScript" ]; then
			subshell=
		else
			subshell="exec"
			rm -f "$0"
		fi
		"$subshell" /jffs/scripts/$thisScript " $title\\n successfully installed!\\n\\n You can now start it with:\\n $message"
	fi
}

remove_amtm(){
	print_info_line
	echo " Do you want to remove $thisScript now?"
	continue_dialog
	rm -f /opt/bin/$thisScript
	rm -f /jffs/scripts/$thisScript
	rm -f "$0"
	echo " Removed all traces of $thisScript"
	echo
	exit 0
}

update_amtm(){
	remoteurl="https://raw.githubusercontent.com/decoderman/amtm/master/amtm"
	curl -fsN --retry 3 "$remoteurl" | grep -qF "version=" || show_amtm " Update aborted,\\n could not retrieve version"
	remotever="$(curl -fsN --retry 3 "$remoteurl" | grep "^version=" | sed -e 's/version=//')"

	if [ "$version" = "$remotever" ]; then
		print_info_line
		echo " No new version is available,"
		echo " do you want to update anyway?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n force updated to v$remotever"
	fi

	if [ "$version" != "$remotever" ]; then
		print_info_line
		echo " An update is available:"
		echo " From v$version to v$remotever"
		echo
		echo " Do you want to update now?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n updated from v$version to v$remotever"
	fi
}

# recheck when /opt/bin has become available
recheck_opt(){
	if [ -d "/opt/bin" ] && [ ! -f "/opt/bin/$thisScript" ] && [ -f "/jffs/scripts/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		show_amtm " /opt/bin detected!\\n\\n You can now start $thisScript with:\\n /jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
	fi
}

# swap) create or delete Swap file
manage_swap(){
if [ "$1" = "create" ]; then
	echo
	while true;do
		case "$continue" in
			1)	clear
				print_dash_line
				echo
				echo " Listing compatible device(s) for"
				echo " a Swap file:"
				echo
				i=1
				for mounted in $(/bin/mount | grep -E "ext2|ext3|ext4|tfat|exfat" | cut -d" " -f3); do
					printf " $i. $GREEN_BG$mounted$NC\\n"
					eval mounts$i="$mounted"
					i=$(( i + 1 ))
				done
				if [ "$i" = "1" ]; then
					show_amtm " No compatible device available."
				fi
				# select device loop
				select_device(){
				[ "$i" = "2" ] && devNo=1 || devNo="1-$((i - 1))"
					printf "\\n Select device [$devNo e=Exit] ";read -r device
				if [ "$device" = "e" ] || [ "$device" = "E" ]; then
					show_amtm menu
				elif [ "$device" -gt "$((i - 1))" ] || [ "$device" = "0" ]; then
					echo
					echo " Invalid device number, try again"
					select_device
				elif [ "$device" -eq "$device" ]; then
					echo
				else
					echo
					echo " Not a number, try again"
					select_device
				fi
				}
				select_device

				eval swapDevice="\$mounts$device"

				printf " creating Swap file on: $GREEN_BG$swapDevice$NC\\n"
				while true;do
					printf "\\n Continue? [1=Yes e=Exit] ";read -r swaps
					case "$swaps" in
						1)	clear
							print_dash_line
							echo
							echo " Select a Swap file size:"
							echo
							echo " 1. --> 256MB"
							echo " 2. --> 512MB"
							echo " 3. -->   1GB"
							echo " 4. -->   2GB"

							while true; do
								printf "\\n Enter size [1-4 e=Exit] ";read -r size
								case "$size" in
									1)	swapsize=262144;break;;
									2)	swapsize=524288;break;;
									3)	swapsize=1048576;break;;
									4)	swapsize=2097152;break;;
								 [Ee])	show_amtm menu;break;;
									*)	printf "\\n input is not an option\\n";;
								esac
							done
							echo
							if [ "$(df "$swapDevice" | xargs | awk '{print $11}')" -le "$swapsize" ]; then
								echo " Not enough free space available on:"
								echo " $swapDevice"
								press_enter_to "select another device"
								read -r;echo
								clear
								print_dash_line
								manage_swap create
							fi
							echo " Creating the Swap file,"
							echo " this will take some time..."
							echo
							dd if=/dev/zero of="$swapDevice/myswap.swp" bs=1k count="$swapsize"
							mkswap "$swapDevice/myswap.swp"
							swapon "$swapDevice/myswap.swp"
							nvram set usb_idle_timeout=0
							nvram commit
							if [ ! -f "/jffs/scripts/post-mount" ]; then
								echo "#!/bin/sh" > /jffs/scripts/post-mount
							elif [ -f "/jffs/scripts/post-mount" ] && ! head -1 /jffs/scripts/post-mount | grep -qE "^#!/bin/sh"; then
								sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/post-mount
							fi
							echo "swapon $swapDevice/myswap.swp # Swap file created by $thisScript" >> /jffs/scripts/post-mount
							show_amtm " Swap file created at:\\n $swapDevice/myswap.swp";break;;
					[Ee])	show_amtm menu;break;;
						*)  printf "\\n input is not an option\\n";;
					esac
				done;break;;
		 [Ee])	show_amtm menu;break;;
			*)	printf "\\n input is not an option\\n";;
		esac
	done

elif [ "$1" = "delete" ]; then
	swaplocation="$(grep -o "swapon .*" /jffs/scripts/post-mount | awk '{print $2}')"
	echo
	echo " Swap file found at:"
	echo " $swaplocation"

	while true;do
		printf "\\n Delete the Swap file? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)	if [ -f "$swaplocation" ]; then
					swapoff "$swaplocation"
					rm -rf "$swaplocation"
					sed -i '\~swapon ~d' /jffs/scripts/post-mount
					show_amtm " Swap file deleted:\\n $swaplocation"
				else
					show_amtm " No Swap file found at\\n $swaplocation"
				fi
				break;;
		[Ee])	show_amtm menu;break;;
			*)	printf "\\n input is not an option\\n";;
		esac
	done

elif [ "$1" = "check" ]; then
	swapFile="$(find /mnt/*/myswap.swp 2> /dev/null)"
	if [ "$swapFile" ]; then
		printf "\\n Swap file found at:\\n $GREEN_BG$swapFile$NC\\n"
		press_enter_to "to fix the path"
		sed -i '\~swapon ~d' /jffs/scripts/post-mount
		echo "swapon $swapFile # Swap file created by $thisScript" >> /jffs/scripts/post-mount
		swapon "$swapFile" 2> /dev/null
		show_amtm " Swap file path changed to\\n $swapFile"
	else
		echo
		echo " No Swap file found."
		press_enter_to "remove reference"
		echo " in /jffs/scripts/post-mount now."
		sed -i '\~swapon ~d' /jffs/scripts/post-mount
		show_amtm " Incorrect Swap file reference removed"
	fi
fi
}

# dc) install or remove disk check at boot
disk_check(){
if [ -f /jffs/scripts/pre-mount ] && grep -q "e2fsck -p" /jffs/scripts/pre-mount; then
	show_amtm " Unsupported pre-mount script found,\\n please remove file manually."
else

	if [ "$1" = "install" ]; then

		cat <<-EOF > /jffs/scripts/disk-check
		#!/bin/sh
		# auto-check filesystems during boot
		# generated by amtm $version
		FSTYPE=\$(fdisk -l \${1:0:8} | grep \$1 | cut -c55-65)
		case "\$FSTYPE" in
		   Linux*)
			  CHKCMD="e2fsck -p";;
		   Win95* | FAT*)
			  CHKCMD="fatfsck -a";;
		   HPFS/NTFS)
			  CHKCMD="ntfsck -a";;
		   *)
			  logger -t amtm "Disk check: Unknown filesystem type \$FSTYPE on \$1 - skipping check."
			  printf "\\n\$(date) Unknown filesystem type \$FSTYPE on \$1 - skipping check.\\n" >> /jffs/amtm-disk-check.log
			  exit 1;;
		esac
		logger -t amtm "Running disk check '\$CHKCMD' on \$1"
		printf "\\n\$(date) Starting '\$CHKCMD \$1'\\n" >> /jffs/amtm-disk-check.log
		\$CHKCMD \$1 >> /jffs/amtm-disk-check.log 2>&1
		logger -t amtm "Disk check done on \$1"
		EOF

		if [ ! -f /jffs/scripts/pre-mount ]; then
			echo "#!/bin/sh" > /jffs/scripts/pre-mount
		elif [ -f /jffs/scripts/pre-mount ] && ! head -1 /jffs/scripts/pre-mount | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/pre-mount
		fi
		if ! grep -q ". /jffs/scripts/disk-check" /jffs/scripts/pre-mount; then
			echo ". /jffs/scripts/disk-check # Added by $thisScript" >> /jffs/scripts/pre-mount
		fi
		[ -f /jffs/scripts/pre-mount ] && chmod 0755 /jffs/scripts/pre-mount

	elif [ "$1" = "remove" ]; then
		sed -i '\~/jffs/scripts/disk-check ~d' /jffs/scripts/pre-mount
		rm -f /jffs/scripts/disk-check
		rm -f /jffs/amtm-disk-check.log

	elif [ "$1" = "log" ]; then
		if [ -f /jffs/amtm-disk-check.log ]; then
			echo
			echo " ---------------------------------------------------"
			printf " /jffs/amtm-disk-check.log has this content:\\n\\n"
			echo " START FILE, --- lines are not part of file"
			echo " ---------------------------------------------------"
			sed -e 's/^/ /' /jffs/amtm-disk-check.log
			echo " ---------------------------------------------------"
			echo " END FILE"
			press_enter_to "return to menu"
		else
			show_amtm " No disk check log found (yet)."
		fi
	fi
fi
}

# Use selected color theme when AB-Solution is installed
check_AB_theme(){
	ab4conf=/opt/share/absolution/.conf/absolution.conf
	if [ -f "$ab4conf" ]; then
		theme="$(grep "THEME=" "$ab4conf" | sed -e 's/THEME=//')"
		. /opt/share/absolution/file/theme.ab
	else
		abcfg="$(find /mnt/*/adblocking/.config/ab-solution.cfg 2> /dev/null)"
		[ "$abcfg" ] && theme="$(grep "appTheme=" "$abcfg" | sed -e 's/appTheme="//; s/"//')"
		[ -z "$theme" ] && theme=white_on_black

		theme_standard(){ RED_LINE='[0;31m';RED_BG='[41m';ERR_BG='[41m';GREEN_BG='[42m';NC='[0m';}
		theme_green(){ RED_LINE='[0;33m';RED_BG='[42m';ERR_BG='[41m';GREEN_BG='[42m';NC='[0m';}
		theme_blue(){ RED_LINE='[0;34m';RED_BG='[44m';ERR_BG='[0;101m';GREEN_BG='[0;104m';NC='[0m';}
		theme_blue_on_white(){ RED_LINE='[0;34m';RED_BG='[0;104m';ERR_BG='[0;101m';GREEN_BG='[0;104m';NC='[0m';}
		theme_high_contrast(){ RED_LINE='[0;91m';RED_BG='[41m';ERR_BG='[41m';GREEN_BG='[42m';NC='[0m';}
		theme_white_on_black(){ RED_LINE=;RED_BG=;ERR_BG=;GREEN_BG=;NC='[0m';}
	fi
	theme_$theme
}

show_amtm(){
	clear
	check_AB_theme

	# amtm header
	printf "$RED_BG $title $NC\\n"
	printf "\\n%-21s%s\\n" " $thisScript $version" "by thelonelycoder"
	print_dash_line

	# show router info, helpful when installing scripts
	[ -z "$(nvram get odmpid)" ] && model="$(nvram get productid)" || model="$(nvram get odmpid)"
	echo " $model $(uname -m) $(nvram get buildno) $(nvram get lan_ipaddr)"
	print_dash_line
	echo
	echo "    SNBForum scripts"

	# Skript menu in alphabetical order follow

	# 1 AB-Solution menu
	if [ -f "$HOME/ab-solution.sh" ] || [ -f /opt/bin/ab-solution ]; then
		printf "$GREEN_BG 1 $NC %-9s%s\\n" "open" "AB-Solution"

		if [ -f /opt/bin/ab-solution ]; then

			case_1(){
				clear
				ab-solution
				show_amtm menu
			}
			abs="ab-solution skip"
		else

			case_1(){
				clear
				sh "$HOME/ab-solution.sh"
				show_amtm menu
			}
			abs="sh $HOME/ab-solution.sh skip"
		fi
	elif [ "$(find /mnt/*/ab-solution.sh 2> /dev/null)" ]; then
		# this is the worst case: device name changed or something bad happened
		printf "$GREEN_BG 1 $NC %-9s%s\\n" "open" "AB-Solution"
		printf "%3s$ERR_BG %-35s$NC\\n" "" "Warning AB-Solution in error state"
		printf "%3s$ERR_BG %-35s$NC\\n" "" "Open it now to correct errors"

		case_1(){
			sh "$(find /mnt/*/ab-solution.sh)"
			show_amtm menu
		}
		abs="sh $(find /mnt/*/ab-solution.sh) verbose"
	else
		printf "$ERR_BG 1 $NC %-9s%s\\n" "install" "AB-Solution"

		case_1(){
			print_info_line
			echo " This installs AB-Solution,"
			echo " the Ad-Blocking Solution."
			echo " Author: thelonelycoder"
			echo " https://www.snbforums.com/threads/ab-solution-the-ad-blocking-solution-v3-10.37511/"
			continue_dialog
			curl -O ab-solution.info/releases/latest/ab-solution.sh && sh ab-solution.sh
			show_amtm " AB-Solution installed."
		}
	fi


	# 2 dnscrypt installer menu
	if [ -d /jffs/dnscrypt ]; then
		printf "$GREEN_BG 2 $NC %-9s%s\\n" "open" "dnscrypt installer"

		case_2(){
			printf "\\n dnscrypt installer menu:\\n\\n"
			curl -L -s -k -O https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/installer && sh installer ; rm installer
			show_amtm menu
		}
	else
		printf "$ERR_BG 2 $NC %-9s%s\\n" "install" "dnscrypt installer"

		case_2(){

			print_info_line
			echo " This installs dnscrypt installer on your router."
			echo " Author: bigeyes0x0"
			echo " https://www.snbforums.com/threads/release-dnscrypt-installer-for-asuswrt.36071/"
			continue_dialog
			curl -L -s -k -O https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/installer && sh installer ; rm installer
			show_amtm " dnscrypt installer installed."
		}
	fi


	# 3 Entware menu
	if [ -f "/opt/bin/opkg" ]; then
		printf "$GREEN_BG 3 $NC %-9s%s\\n" "update" "Entware"

		case_3(){
			print_info_line
			echo " This updates and upgrades Entware packages"
			continue_dialog
			opkg update
			opkg upgrade
			show_amtm " Entware packages updated and upgraded."
		}
	else
		printf "$ERR_BG 3 $NC %-9s%s\\n" "" "Menu not available"

		case_3(){
			print_info_line
			echo " The Entware menu will be available"
			echo " after installation through AB-Solution"
			echo " or with another Entware install script."
			echo
			echo " The installation of Entware through"
			echo " amtm is not currently available due to"
			echo " changes in the Entware repositories."
			press_enter_to "return to menu"
			show_amtm menu
		}
	fi


	# 4 Pixelserv menu
	if [ -f "/opt/bin/pixelserv-tls" ]; then
		if [ -L "/opt/bin/pixelserv-tls" ]; then
			printf "$GREEN_BG 4 $NC %-9s%s\\n" "update" "pixelserv-tls beta version"
		else
			printf "$ERR_BG 4 $NC %-9s%s\\n" "install" "pixelserv-tls beta version"
		fi

		case_4(){
			print_info_line
			echo " This installs the latest pixelserv-tls beta version."
			echo " Be aware this is for advanced users only."
			echo " Author: kvic"
			echo " https://www.snbforums.com/threads/pixelserv-a-better-one-pixel-webserver-for-adblock.26114/"
			continue_dialog
			sh -c "$(wget -qO - https://kazoo.ga/pixelserv-tls/install-beta.sh)"
			/opt/etc/init.d/S80pixelserv-tls restart
			show_amtm " latest pixelserv-tls beta version\\n installed and restarted."
		}
	else
		printf "$ERR_BG 4 $NC %-9s%s\\n" "" "Menu not available"

		case_4(){
			show_amtm " pixelserv-tls beta menu not available,\\n pixelserv-tls is not installed."
		}
	fi


	# 5 Skynet menu
	if [ -f /jffs/scripts/firewall ] && grep -qE "sh /jffs/scripts/firewall .* # Skynet" /jffs/scripts/firewall-start 2> /dev/null; then
		printf "$GREEN_BG 5 $NC %-9s%s\\n" "open" "Skynet"

		case_5(){
			/jffs/scripts/firewall
			show_amtm menu
		}
	else
		printf "$ERR_BG 5 $NC %-9s%s\\n" "install" "Skynet"

		case_5(){
			print_info_line
			echo " This installs Skynet on your router."
			echo " Author: Adamm"
			echo " https://www.snbforums.com/threads/skynet-asus-firewall-addition-dynamic-malware-country-manual-ip-blocking.16798/"
			continue_dialog

			if [ "$(ipset -v | grep -Fo v6)" != "v6" ]; then
				show_amtm " Skynet install failed,\\n IPSet version on router not supported:\\n\\n$(ipset -v | sed -e 's/^/ /')"
			fi

			curl --retry 3 "https://raw.githubusercontent.com/Adamm00/IPSet_ASUS/master/firewall.sh" -o "/jffs/scripts/firewall" && chmod +x /jffs/scripts/firewall && sh /jffs/scripts/firewall install
			show_amtm " Skynet installed."
		}
	fi


	# System tools follow
	# swp/swap Swap file
	echo
	swaplocation="$(grep -o "swapon .*" /jffs/scripts/post-mount 2>/dev/null | awk '{print $2}')"
	if [ -z "$swaplocation" ]; then
		printf "${ERR_BG}swp$NC %-9s%s\\n" "create" "Swap file"

		case_swp(){
			print_info_line
			echo " This creates a Swap file."
			echo " A Swap file is useful when the router"
			echo " runs out of memory (RAM)."
			echo " See router WebUI/Tools under Memory."
			continue_dialog
			manage_swap create
		}

	elif [ -f "$swaplocation" ]; then
		printf "${GREEN_BG}swp$NC %-9s%s ${GREEN_BG}%s$NC\\n" "delete" "Swap file" "$(echo "${swaplocation#/tmp}" | sed 's|/myswap.swp||')"

		case_swp(){
			manage_swap delete
		}

	elif [ ! -f "$swaplocation" ] && [ ! -z "$swaplocation" ]; then
		printf "${ERR_BG}swp$NC %-9s%s ${ERR_BG}%s$NC\\n" "check" "Swap file" "${swaplocation#/tmp}"

		case_swp(){
			manage_swap check
		}
	fi

	# Disk check
	if [ -f /jffs/scripts/disk-check ] && grep -qE "/jffs/scripts/disk-check # Added by" /jffs/scripts/pre-mount; then
		printf "${GREEN_BG} dc$NC %-9s%s\\n" "remove" "Disk check script"

		[ -f /jffs/amtm-disk-check.log ] && printf "${GREEN_BG}dcl$NC %-9s%s\\n" "show" "Disk check log"

		case_dc(){
			disk_check remove
			show_amtm menu
		}
	else
		printf "${ERR_BG} dc$NC %-9s%s\\n" "install" "Disk check script"

		case_dc(){
			print_info_line
			echo " This installs a script that checks"
			echo " your USB storage devices on boot."
			echo " Author: latenitetech"
			echo " https://github.com/RMerl/asuswrt-merlin/wiki/USB-Disk-Check-at-Boot"
			continue_dialog

			disk_check install
			show_amtm " Disk check script installed. It will\\n run on every boot of the router.\\n The check log can be viewed directly\\n in amtm with dcl."
		}
	fi

	# amtm menu
	printf "\\n$GREEN_BG u $NC update\\n"
	[ -f "/jffs/scripts/$thisScript" ] || [ -f "/opt/bin/$thisScript" ] && printf "$GREEN_BG r $NC remove\\n"  || printf "$GREEN_BG i $NC install\\n"
	printf "$GREEN_BG a $NC about\\n"
	printf "$GREEN_BG e $NC exit\\n"

	# Output under amtm menu, the notification area. $1 can be passed on as positional parameter
	if [ "$1" = "menu" ]; then
		print_end_line
	else
		print_info_line
		printf "$1\\n"
		print_end_line
	fi

	# case switcher
	while true; do

		# Input prompt
		printf "${RED_BG} What do you want to do? ${NC} ";read -r selection

		case "$selection" in

			# Scripts go here
			1)			case_1;break;;
			2)			case_2;break;;
			3)			case_3;break;;
			4)			case_4;break;;
			5)			case_5;break;;

			# System tools
			swap|swp)	case_swp;break;;
			[Dd][Cc])	case_dc;break;;
			dcl)		disk_check log
						show_amtm menu;break;;

			# amtm options
			[Uu])		update_amtm;break;;
			[Ii])		install_amtm;break;;
			[Rr])		remove_amtm;break;;
			[Aa])		about_amtm;break;;
			[Ee])		printf "\\n See you later\\n\\n"
						exit 0;break;;
			11)			exec "$0";break;; # hidden dev option
			1s)			$abs;show_amtm menu;break;; # hidden dev option
			*)			printf "\\n input is not an option\\n\\n";;

		esac

	done
}

# asks to install, show menu, pass along positional parameter
if [ ! -f "/jffs/scripts/$thisScript" ]; then
	echo
	print_info_line
	echo " Do you want to install $thisScript, the"
	echo " $title?"
	continue_dialog
	install_amtm
elif [ -z "$1" ]; then
	recheck_opt
	show_amtm menu
else
	show_amtm "$1"
fi
#eof
